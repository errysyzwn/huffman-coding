{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import heapq, math\n",
    "\n",
    "class Node:\n",
    "    def __init__(self, symbol=None, frequency=None):\n",
    "        self.symbol = symbol\n",
    "        self.frequency = frequency\n",
    "        self.left = None\n",
    "        self.right = None\n",
    "\n",
    "    def __lt__(self, other):\n",
    "        return self.frequency < other.frequency\n",
    "\n",
    "def build_huffman_tree(chars, freq):\n",
    "    priority_queue = [Node(char, f) for char, f in zip(chars, freq)]\n",
    "    heapq.heapify(priority_queue)\n",
    "\n",
    "    while len(priority_queue) > 1:\n",
    "        left_child = heapq.heappop(priority_queue)\n",
    "        right_child = heapq.heappop(priority_queue)\n",
    "        merged_node = Node(frequency=left_child.frequency + right_child.frequency)\n",
    "        merged_node.left = left_child\n",
    "        merged_node.right = right_child\n",
    "        heapq.heappush(priority_queue, merged_node)\n",
    "\n",
    "    return priority_queue[0]\n",
    "\n",
    "def generate_huffman_codes(node, code=\"\", huffman_codes={}):\n",
    "    if node is not None:\n",
    "        if node.symbol is not None:\n",
    "            huffman_codes[node.symbol] = code\n",
    "        generate_huffman_codes(node.left, code + \"0\", huffman_codes)\n",
    "        generate_huffman_codes(node.right, code + \"1\", huffman_codes)\n",
    "\n",
    "    return huffman_codes\n",
    "\n",
    "def calculate_frequencies(input_string):\n",
    "    char_counts = {}\n",
    "    for char in input_string:\n",
    "        if char in char_counts:\n",
    "            char_counts[char] += 1\n",
    "        else:\n",
    "            char_counts[char] = 1\n",
    "\n",
    "    total_chars = len(input_string)\n",
    "    chars = list(char_counts.keys())\n",
    "    freq = [count / total_chars for count in char_counts.values()]\n",
    "    return chars, freq, char_counts\n",
    "\n",
    "input_string = input(\"Enter a text fragment: \").strip()\n",
    "chars, freq, char_counts = calculate_frequencies(input_string)\n",
    "root = build_huffman_tree(chars, freq)\n",
    "huffman_codes = generate_huffman_codes(root)\n",
    "sorted_huffman_codes = sorted(huffman_codes.items(), key=lambda item: (len(item[1]), -char_counts[item[0]]))\n",
    "\n",
    "average_code_length = sum(frequency * len(huffman_codes[char]) for char, frequency in zip(chars, freq))\n",
    "entropy = sum(frequency * math.log2(1 / frequency) for frequency in freq)\n",
    "efficiency = entropy / average_code_length\n",
    "\n",
    "print(\"\\n\"+\"-\" * 50)\n",
    "print(f\"{'Symbols (Frequency)':<25}{'Code':<10}{'Length':<10}\")\n",
    "print(\"-\" * 50)\n",
    "for char, code in sorted_huffman_codes:\n",
    "    frequency = f\"{char_counts[char]}/{len(input_string)}\"\n",
    "    length = len(code)\n",
    "    print(f\"    {char.upper()} ({frequency})\\t\\t  {code:<10} {length:<10}\")\n",
    "print(\"-\" * 50)\n",
    "print(\"Encode Table\".center(50,' '))\n",
    "\n",
    "print(\"\\nAverage Code Length:\")\n",
    "print(\"= Σ (frequency * code length)\")\n",
    "print(f\"= {average_code_length:.4f} bits\")\n",
    "print(\"\\nEntropy:\")\n",
    "print(\"= Σ (frequency * log2(1 / frequency))\")\n",
    "print(f\"= {entropy:.4f} bits/symbol\")\n",
    "print(\"\\nEfficiency:\")\n",
    "print(\"= Entropy / Average Code Length\")\n",
    "print(f\"= {efficiency * 100:.2f}%\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
